'use client';

import React, { useState } from 'react';
import { MessageCircle, FileText, CheckCircle, AlertCircle } from 'lucide-react';
import { t } from '@/lib/i18n';

export interface AssistantBubbleProps {
  message: string;
  sources?: Array<{ kind: 'db' | 'doc'; label: string; section?: string }>;
  confidence: number;
  intent?: string;
  locale?: 'en' | 'ne';
  className?: string;
}

export function AssistantBubble({
  message,
  sources = [],
  confidence,
  intent,
  locale = 'en',
  className = ''
}: AssistantBubbleProps) {
  const [showSources, setShowSources] = useState(false);
  
  // Parse message to separate answer and sources
  const parts = message.split('**Source:**');
  const answer = parts[0].trim();
  const sourceText = parts[1]?.trim();
  
  // Confidence indicator
  const getConfidenceColor = (conf: number) => {
    if (conf >= 0.8) return 'text-green-600';
    if (conf >= 0.6) return 'text-yellow-600';
    return 'text-red-600';
  };
  
  const getConfidenceIcon = (conf: number) => {
    if (conf >= 0.8) return <CheckCircle className="w-4 h-4" />;
    if (conf >= 0.6) return <AlertCircle className="w-4 h-4" />;
    return <AlertCircle className="w-4 h-4 text-red-600" />;
  };
  
  // Intent badge
  const getIntentLabel = (intentType: string) => {
    const intentLabels: Record<string, string> = {
      'book_service': t('book', locale),
      'reschedule': t('reschedule', locale),
      'cancel_booking': t('cancel', locale),
      'price_quote': t('search', locale),
      'availability': t('search', locale),
      'service_info': t('help', locale),
      'account_issue': t('help', locale),
      'payment_issue': t('help', locale),
      'complaint': t('help', locale),
      'general_question': t('help', locale),
      'handoff_support': t('help', locale)
    };
    
    return intentLabels[intentType] || intentType;
  };
  
  return (
    <div className={`bg-white rounded-lg border border-gray-200 shadow-sm p-4 ${className}`}>
      {/* Header with AI indicator and confidence */}
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center space-x-2">
          <div className="bg-blue-100 p-2 rounded-full">
            <MessageCircle className="w-4 h-4 text-blue-600" />
          </div>
          <span className="text-sm font-medium text-gray-700">
            {locale === 'ne' ? 'AI सहायक' : 'AI Assistant'}
          </span>
        </div>
        
        <div className="flex items-center space-x-2">
          {intent && (
            <span className="px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded-full">
              {getIntentLabel(intent)}
            </span>
          )}
          
          <div className={`flex items-center space-x-1 ${getConfidenceColor(confidence)}`}>
            {getConfidenceIcon(confidence)}
            <span className="text-xs font-medium">
              {Math.round(confidence * 100)}%
            </span>
          </div>
        </div>
      </div>
      
      {/* AI Response */}
      <div className="mb-3">
        <p className="text-gray-800 leading-relaxed">{answer}</p>
      </div>
      
      {/* Sources Toggle */}
      {sources.length > 0 && (
        <div className="border-t border-gray-100 pt-3">
          <button
            onClick={() => setShowSources(!showSources)}
            className="flex items-center space-x-2 text-sm text-blue-600 hover:text-blue-700 transition-colors"
          >
            <FileText className="w-4 h-4" />
            <span>
              {showSources 
                ? (locale === 'ne' ? 'स्रोतहरू छिपाउनुहोस्' : 'Hide Sources')
                : (locale === 'ne' ? 'स्रोतहरू देखाउनुहोस्' : 'Show Sources')
              }
            </span>
          </button>
          
          {showSources && (
            <div className="mt-2 space-y-2">
              {sources.map((source, index) => (
                <div key={index} className="flex items-center space-x-2 text-sm text-gray-600">
                  <div className={`w-2 h-2 rounded-full ${
                    source.kind === 'db' ? 'bg-green-400' : 'bg-blue-400'
                  }`} />
                  <span className="font-medium">{source.label}</span>
                  {source.section && (
                    <span className="text-gray-500">§{source.section}</span>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      )}
      
      {/* Footer with timestamp */}
      <div className="mt-3 pt-2 border-t border-gray-100">
        <div className="flex items-center justify-between text-xs text-gray-500">
          <span>
            {locale === 'ne' ? 'AI द्वारा उत्पन्न' : 'Generated by AI'}
          </span>
          <span>
            {new Date().toLocaleTimeString(locale === 'ne' ? 'ne-NP' : 'en-US', {
              hour: '2-digit',
              minute: '2-digit'
            })}
          </span>
        </div>
      </div>
    </div>
  );
}

// Compact version for chat
export function CompactAssistantBubble({
  message,
  sources = [],
  confidence,
  locale = 'en'
}: Omit<AssistantBubbleProps, 'className'>) {
  const [showSources, setShowSources] = useState(false);
  
  return (
    <div className="flex space-x-3">
      <div className="flex-shrink-0">
        <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
          <MessageCircle className="w-4 h-4 text-blue-600" />
        </div>
      </div>
      
      <div className="flex-1 min-w-0">
        <div className="bg-blue-50 rounded-lg p-3">
          <p className="text-gray-800 text-sm leading-relaxed">{message}</p>
          
          {sources.length > 0 && (
            <div className="mt-2">
              <button
                onClick={() => setShowSources(!showSources)}
                className="text-xs text-blue-600 hover:text-blue-700 flex items-center space-x-1"
              >
                <FileText className="w-3 h-3" />
                <span>
                  {showSources 
                    ? (locale === 'ne' ? 'छिपाउनुहोस्' : 'Hide')
                    : (locale === 'ne' ? 'स्रोतहरू' : 'Sources')
                  }
                </span>
              </button>
              
              {showSources && (
                <div className="mt-2 space-y-1">
                  {sources.map((source, index) => (
                    <div key={index} className="text-xs text-gray-600 flex items-center space-x-1">
                      <div className={`w-1.5 h-1.5 rounded-full ${
                        source.kind === 'db' ? 'bg-green-400' : 'bg-blue-400'
                      }`} />
                      <span>{source.label}</span>
                      {source.section && <span>§{source.section}</span>}
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}
        </div>
        
        <div className="mt-1 flex items-center justify-between text-xs text-gray-500">
          <span>
            {Math.round(confidence * 100)}% {locale === 'ne' ? 'विश्वास' : 'confidence'}
          </span>
          <span>
            {new Date().toLocaleTimeString(locale === 'ne' ? 'ne-NP' : 'en-US', {
              hour: '2-digit',
              minute: '2-digit'
            })}
          </span>
        </div>
      </div>
    </div>
  );
}
