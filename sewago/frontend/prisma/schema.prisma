// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  hash      String
  role      Role     @default(Customer)
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  customerBookings Booking[] @relation("CustomerBookings")
  providerBookings Booking[] @relation("ProviderBookings")
  reviews         Review[]
  providerProfile ProviderProfile?

  @@map("users")
}

model ProviderProfile {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @unique @db.ObjectId
  services    ServiceRef[]
  kycStatus   KYCStatus   @default(Pending)
  documents   String[]    // URLs to uploaded documents
  cities      String[]    // Cities where provider operates
  baseRates   Json        // Service-specific pricing
  availability Json       // Weekly availability schedule
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("provider_profiles")
}

model Service {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  slug        String   @unique
  title       String
  description String
  basePrice   Int
  icon        String
  category    String
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookings Booking[]

  @@map("services")
}

model ServiceRef {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  serviceId   String @db.ObjectId
  serviceName String
  basePrice   Int
  providerId  String @db.ObjectId

  // Relations
  providerProfile ProviderProfile @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@map("service_refs")
}

model Booking {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  serviceId      String        @db.ObjectId
  customerId     String        @db.ObjectId
  providerId     String?       @db.ObjectId
  city           String
  address        String
  scheduledAt    DateTime
  price          Int
  status         BookingStatus @default(Requested)
  paymentStatus  PaymentStatus @default(Pending)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  notes          String?

  // Relations
  service  Service @relation(fields: [serviceId], references: [id])
  customer User    @relation("CustomerBookings", fields: [customerId], references: [id])
  provider User?  @relation("ProviderBookings", fields: [providerId], references: [id])
  reviews  Review[]
  payments Payment[]

  @@map("bookings")
}

model Review {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  bookingId    String   @db.ObjectId
  customerId   String   @db.ObjectId
  providerId   String   @db.ObjectId
  rating       Int      // 1-5 stars
  comment      String?
  createdAt    DateTime @default(now())

  // Relations
  booking  Booking @relation(fields: [bookingId], references: [id])
  customer User    @relation(fields: [customerId], references: [id])

  @@map("reviews")
}

model Payment {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  bookingId  String        @db.ObjectId
  provider   PaymentProvider
  amount     Int
  currency   String        @default("NPR")
  status     PaymentStatus @default(Pending)
  gatewayRef String?       // Gateway transaction reference
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

// Enums
enum Role {
  Customer
  Provider
  Admin
}

enum KYCStatus {
  Pending
  Approved
  Rejected
}

enum BookingStatus {
  Requested
  Accepted
  InProgress
  Completed
  Cancelled
}

enum PaymentStatus {
  Pending
  Paid
  Refunded
}

enum PaymentProvider {
  Khalti
  eSewa
}
