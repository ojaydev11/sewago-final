// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  role         UserRole @default(CUSTOMER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  bookings        Booking[]
  providerProfile ProviderProfile?
  reviews         Review[]
  addresses       Address[]

  @@map("users")
}

model Service {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String
  category    String
  imageUrl    String?
  priceRange  Json? // { min: number, max: number }
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookings Booking[]
  reviews  Review[]

  @@map("services")
}

model ProviderProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  specialties String[]
  experience  Int? // years
  rating      Float?  @default(0)
  totalJobs   Int     @default(0)
  isVerified  Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@map("provider_profiles")
}

model Address {
  id          String   @id @default(cuid())
  userId      String
  street      String
  city        String
  state       String
  postalCode  String
  country     String   @default("Nepal")
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@map("addresses")
}

model Booking {
  id               String        @id @default(cuid())
  userId           String
  serviceId        String
  providerId       String?
  status           BookingStatus @default(PENDING)
  scheduledAt      DateTime
  priceEstimateMin Float
  priceEstimateMax Float
  addressId        String
  notes            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  service   Service         @relation(fields: [serviceId], references: [id])
  provider  ProviderProfile? @relation(fields: [providerId], references: [id])
  address   Address         @relation(fields: [addressId], references: [id])
  review    Review?

  @@map("bookings")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  serviceId String
  bookingId String   @unique
  rating    Int      // 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id])
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

enum UserRole {
  CUSTOMER
  PROVIDER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
